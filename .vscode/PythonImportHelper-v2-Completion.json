[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "DEST_IP",
        "kind": 5,
        "importPath": "chat_client",
        "description": "chat_client",
        "peekOfCode": "DEST_IP = socket.gethostbyname(socket.gethostname())\nDEST_PORT = 12345\nENCODER = 'utf-8'\nBYTESIZE = 1024\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((DEST_IP, DEST_PORT))",
        "detail": "chat_client",
        "documentation": {}
    },
    {
        "label": "DEST_PORT",
        "kind": 5,
        "importPath": "chat_client",
        "description": "chat_client",
        "peekOfCode": "DEST_PORT = 12345\nENCODER = 'utf-8'\nBYTESIZE = 1024\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((DEST_IP, DEST_PORT))",
        "detail": "chat_client",
        "documentation": {}
    },
    {
        "label": "ENCODER",
        "kind": 5,
        "importPath": "chat_client",
        "description": "chat_client",
        "peekOfCode": "ENCODER = 'utf-8'\nBYTESIZE = 1024\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((DEST_IP, DEST_PORT))",
        "detail": "chat_client",
        "documentation": {}
    },
    {
        "label": "BYTESIZE",
        "kind": 5,
        "importPath": "chat_client",
        "description": "chat_client",
        "peekOfCode": "BYTESIZE = 1024\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((DEST_IP, DEST_PORT))",
        "detail": "chat_client",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "chat_client",
        "description": "chat_client",
        "peekOfCode": "client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((DEST_IP, DEST_PORT))",
        "detail": "chat_client",
        "documentation": {}
    },
    {
        "label": "HOST_IP",
        "kind": 5,
        "importPath": "chat_server",
        "description": "chat_server",
        "peekOfCode": "HOST_IP = socket.gethostbyname(socket.gethostname())\nHOST_PORT = 12345\nENCODER = \"utf-8\"\nBYTESIZE = 1024\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST_IP, HOST_PORT))\nserver_socket.listen()\nprint('Server is running...\\n')\nclient_socket, client_address = server_socket.accept()\nclient_socket.send('you are connected to the server...\\n'.encode(ENCODER))",
        "detail": "chat_server",
        "documentation": {}
    },
    {
        "label": "HOST_PORT",
        "kind": 5,
        "importPath": "chat_server",
        "description": "chat_server",
        "peekOfCode": "HOST_PORT = 12345\nENCODER = \"utf-8\"\nBYTESIZE = 1024\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST_IP, HOST_PORT))\nserver_socket.listen()\nprint('Server is running...\\n')\nclient_socket, client_address = server_socket.accept()\nclient_socket.send('you are connected to the server...\\n'.encode(ENCODER))",
        "detail": "chat_server",
        "documentation": {}
    },
    {
        "label": "ENCODER",
        "kind": 5,
        "importPath": "chat_server",
        "description": "chat_server",
        "peekOfCode": "ENCODER = \"utf-8\"\nBYTESIZE = 1024\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST_IP, HOST_PORT))\nserver_socket.listen()\nprint('Server is running...\\n')\nclient_socket, client_address = server_socket.accept()\nclient_socket.send('you are connected to the server...\\n'.encode(ENCODER))",
        "detail": "chat_server",
        "documentation": {}
    },
    {
        "label": "BYTESIZE",
        "kind": 5,
        "importPath": "chat_server",
        "description": "chat_server",
        "peekOfCode": "BYTESIZE = 1024\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST_IP, HOST_PORT))\nserver_socket.listen()\nprint('Server is running...\\n')\nclient_socket, client_address = server_socket.accept()\nclient_socket.send('you are connected to the server...\\n'.encode(ENCODER))",
        "detail": "chat_server",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "chat_server",
        "description": "chat_server",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST_IP, HOST_PORT))\nserver_socket.listen()\nprint('Server is running...\\n')\nclient_socket, client_address = server_socket.accept()\nclient_socket.send('you are connected to the server...\\n'.encode(ENCODER))",
        "detail": "chat_server",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "tcp_client",
        "description": "tcp_client",
        "peekOfCode": "client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((socket.gethostbyname(socket.gethostname()), 12345))\n# before decoding\nmessage = client_socket.recv(1024)\nprint(message)\nprint(type(message))\n# after decoding\nmessage = message.decode('utf-8')\nprint(message)\nprint(type(message))",
        "detail": "tcp_client",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "tcp_client",
        "description": "tcp_client",
        "peekOfCode": "message = client_socket.recv(1024)\nprint(message)\nprint(type(message))\n# after decoding\nmessage = message.decode('utf-8')\nprint(message)\nprint(type(message))",
        "detail": "tcp_client",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "tcp_client",
        "description": "tcp_client",
        "peekOfCode": "message = message.decode('utf-8')\nprint(message)\nprint(type(message))",
        "detail": "tcp_client",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "tcp_server",
        "description": "tcp_server",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# ^ Get IP\nprint(socket.gethostname())\nprint(socket.gethostbyname(socket.gethostname()))\nserver_socket.bind((socket.gethostbyname(socket.gethostname()), 12345))\nserver_socket.listen()\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    print(type(client_socket))\n    print(client_socket)",
        "detail": "tcp_server",
        "documentation": {}
    },
    {
        "label": "client_socket",
        "kind": 5,
        "importPath": "udp_client",
        "description": "udp_client",
        "peekOfCode": "client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nclient_socket.sendto('hello server'.encode('utf-8'), (socket.gethostbyname(socket.gethostname()), 12345))",
        "detail": "udp_client",
        "documentation": {}
    },
    {
        "label": "server_socket",
        "kind": 5,
        "importPath": "udp_server",
        "description": "udp_server",
        "peekOfCode": "server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_socket.bind((socket.gethostbyname(socket.gethostname()), 12345))\nmessage, address = server_socket.recvfrom(1024)\nprint(message.decode('utf-8'))\nprint(address)",
        "detail": "udp_server",
        "documentation": {}
    }
]